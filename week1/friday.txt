Lambda expressions
	- allows for compact expression of instances of single method class
		- implements a functional interface without requiring a whole new class to do so
			- ie: Runnable interface, run method
	- syntax:
		- [interfaceName] [objName] = ()-> [returnValue];
		- [interfaceName] [objName] = ([parameters])-> [returnValue];
		- [interfaceName] [objName] = ([parameters])->{

			// code goes here
		
		};


Multithreading
	- refers to dealing with application with concurrent processes
		- these sub-processes/path of executions are refered to as threads
	- types of threads
		- User threads
			- JVM ensures their execution to completion before exiting the application
				- ie: main method - main thread
		- Daemon threads
			- "optional"
			- lower in priority
			- run in the background
				- ie: gc
		- each thread gets their own stack but all share the same heap

Creating and running threads
	- extends the Thread Class
	- implement the Runnable interface
		- preferred way
	- override the run() method
		- specifies a behavior for the thread
	- instantiate thread object and invoke start() to start a thread
		- start() method creates a new path of execution and runs run() on it
		- otherwise if run() is called, it is executed on the main thread

States of a thread
	- New
		- created thread object, run() hasn't been called
	- Runnable
		- run() has been called and is executing
	- Blocked
		- waiting for another thread to be done accessing a resource on which a lock has been placed on (synchronized)
			- synchronyzed prevents more than one thread at a time to access a resource
	- Waiting
		- wait()
			- waits until notify()/notifyAll() is called
		- join()
			- stops the execution of a thread until another thread is done executing
	- Timed-waiting
		- sleep()
			- wait a certain amount of time
	- Terminated
		- everything has been executed

Concurreny issues:
	- starvation
	- deadlock

Serialization:
	- converting the state of a Java object into a byte stream
	- de-serialization is the other way around
	- used to transmit objects over a network or persiste them to a file to be loaded later (ie: when the application has restarted)

Maven
	- Project management tool, Build automation tool
	- Project management tool
		- handles our dependencies for us
			- dependency:
				- frameworks/libraries written by other developers to be used in your project
					- include:
						- groupId
						- artifactId
						- version
		- https://mvnrepository.com/
		- in pom.xml
			- ie: 
	<dependencies>
		<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.7.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
		- stored locally in the ~/.m2 folder
	- Build automation tool
		- manages the lifecycle of your application
		- goal is to create an artifact to be deployed
			- 3 build lifecycles
				- Clean - remove/clean previous artifacts (.jar, .war ...)
				- Default - tests/packages you application
					- Validate
					- Compile
					- Test -> tests compile code
					- Package -> packages all of compiled code into a war/jar file
					- Verify
					- Install
					- Deploy
				- Site - documentation
		- project structure
			- src/main/java: where your packages/classes(...) go 
			- src/test/java: where your tests go
			- src/main/resources: where resources like properties for frameworks/libraries go
			- src/test/resources: where resources for testing go
			- pom.xml: project object model(metadata about project, properties, dependencies, build details)
				- allows for shared project configuration across teams

Testing
	- process of checking if an application is working as intended
	- positive testing - making sure that an application handles the correct input
	- negative testing - making sure that an application handles an incorrect input
	- regression testing - making sure that new features added to an application do not break previously written code
					- making sure the tests still pass

Unit testing
	- refers to testing an individual unit of functionality
		- methods in this case
	- at the bottom of the testing pyramid, most abundant kind of testing
	- JUnit framework in Java

TDD (Test Driven Development)
	- The process of writing your tests to fail first to establish the functionality of your application, then writing code to pass those tests
		- a way to approach this
			- write interfaces/empty methods to establish the functionality desired
			- write your tests
			- write code/implement methods to pass those tests
		- benefits
			- planning/establishing desired behavior early on
			- easily find where the issue arises since tests are already written

JUnit
	- JUnit is a Java Unit Testing framework - I will attempt to use JUnit 5
	- it includes a lot of annotations and classes in order to write automated unit tests
	- it leverages "assert" methods to check for particular condition to determine if a test passes
		- a test passes if the result obtained is the result expected
			- ie: exception thrown might be the desired behavior
		- https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/Assertions.html
			- docs
