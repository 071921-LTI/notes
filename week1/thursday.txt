Non-access modifiers
	- abstract
	- default
		- allows to prvide a method implementation in an interface
	- static
		- in front of a field
			- associated with the class rather than an instance
			- can be called using the classname
			- shared by all instances
		- in front of a method
			- associated with the class rather than an instance
			- can be called using the classname
	- final
		- in front of a class
			- indicates that the class cannot be extended
		- in front of a field
			- indicates that a variable/field cannot be reassigned once initialized
		- in front of a method
			- indicates that a method cannot be overriden
	- synchronized - has to do with threads
		- only one thread can access a resource at a time

Exceptions
	- represent a condition that prevents a method from completing successfully
	- Object created from the exception class and its subclasses
	- Inherits from the Throwable class
	- Divided into Checked/Unchecked exceptions
		- Checked exceptions are checked by the compiler
			- "compile-time exceptions", cannot compile code until handled
			- Exception and its subclasses but not inheriting from RuntimeException
			- Arises from circumstances outside of the programmer's control
				- ie: filenotfoundexception, classnotfoundexception
		- Unchecked/Runtime exceptions, these are not accounted by compiler
			- subclasses of runtime exception
			- arise from coding erros/ can usually be prevented
				- ArrayIndexOutOfBOundsException, Arithmetic...
Errors
	- extends from Throwable (class)
	- Identify internal errors that cannot be recovered from
		- bad practice to catch those
	- ie: StackOverFlowError, NoClassDefFoundError...

Exception Handling
	- Try block
		- used to encapsulate any statements that may throw an exception
	- Catch block
		- Exception handler, specify what logic/behavior is to be executed if an exception is caught
		- catch (ExceptionType1 | ExceptionType2 e){
			}
			- can catch multiple types, but should be siblings on the hierarchy
		- can have multiple catch blocks
			- most specific to least specific exception type
				- otherwise most generic exception will catch all
	- Finally block
		- executes regardless of the outcome 
			- whether exception is thrown or not
		- way to skip finally
			- use System.exit(0);
		- used to close resources
	- throws
		- use in method signature "throws"
		- if there is not enough information to handle an exception properly at the time it's thrown
			- lets Java know the exception will be handled by the called method
	- try with resources
		- allows a resource to be closed without needing a finally block
		- resource must implement autoclosable interface
Throwing Exceptions
	- throw new Exception();

Datastructure
	- Solution to work/interact with data

Collection
	- is an interface that is considered the "super" interface from which every collection(List, Set, Queue) comes from
		- declares methods implemented in all concrete collection classes
			- ie:
				- add();
				- remove();
				- contains();
				- size();
	- Only work with objects (Wrapper classes are used to work with primitives)
	- Collection (I) is not to be confused with the Collections (C)
		- Collections is a class that provides util methods to work with Collection
	- Implements Iterable/ allows for a collection to be iterated over/use an iterator
	- List
		- Interface extends Collection, they can hold duplicate values
		- Concrete implementations
			- ArrayList
				- Dynamically sized array, in which elements can be added and removed
				- Arraylists leverage indexes which makes them more efficient for retrieval operations
			- LinkedList
				- Consists of a series of nodes which store data and a reference to the next node
				- LinkedList are better for insertion/deletion
	- Set
		- Interface extends Collection, they cannot hold duplicate values
		- Concrete implementations
			- HashSet
				- unordered (Can't guarantee an order)
			- TreeSet
				- ordered
					- follows "natural order"
						- specify a custom order using compator/comparable
	- Queue
		- Interface extends Collection, follows a FIFO order (First In First Out)
		- Concrete implementation:
			- Priority Queues
				- ordered by priority
			- LinkedList
				- implements both list and queue
		- additional methods
			- peek, poll...
	- Map
		- interface that does not extend Collection
			- leverages key value pair system
			- they do not implement the iterable interface so cannot use for-each loops directly on maps
		- concrete implementations
			- HashMap
			- TreeMap
Comparable
	- functional interface
	- compareTo method
		- implemented by the class itself
		- returns an integer used to define an order
	
Comparator
	- functional interface
	- compare method
	- similar to comparable but have to use a comparator object
	