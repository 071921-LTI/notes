JDBC
	- Java Database Connectivity
		- establish a connection between a Java application and a database
			- dependency is database specific
	- Important JDBC classes/interfaces:
		- DriverManager
			- manages the JDBC driver
			- .getConnection()
				- provide connection to db
				- pass in credentials in order to connect
					- hardcoded, file, environment variables 
		- Connection
			- represents the connection to the database
			- .setAutoCommit(boolean)
			- createStatement()
			- commit()
			- rollback()
			- close()
		- Statement
			- represents a SQL statement
			- executeQuery(sql)
			- best used when no user input is required due to vulnerability to SQL injection
		- PreparedStatement
			- represents a SQL statement, that has been pre-processed before its execution and therefore prevents sql injection
			- leverages set methods to parameterize the prepared statement
				- setInt, setString...
			- executeUpdate
		- CallableStatement*
			- calls a function/procedure defined in a database
		- ResultSet
			- result of a query
			- next()
			- retrieve data using .get methods
	- SQL Injection
		- placing malicious code into a sql statement
			- SELECT * FROM EMPLOYEES WHERE = [userInput];
				- input could be "1; DROP TABLE EMPLOYEES;"

Joins
	- way to combine rows from different tables based on some logical relationship (columns)
	- Types of joins:
		- inner join/join: return all the records that have matching values in both tables
		- left (outer) join: return all records from the left table and the matched records from the right table
		- right (outer) join: return all records from the right table and the matched records from the left table
		- Full (outer) join: returns all records when there is a match in either the left or right table
		- self join: join a table with itself to combine related data from the same table

		- join info: https://www.postgresql.org/docs/10/tutorial-join.html