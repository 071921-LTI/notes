AWS
	- Amazon Web Services
	- Offers cloud solutions to customer needs
	- Why/What is the cloud?
		- cost-saving
			- not having to manage servers on-premise
				- staff
				- maintaining, upgrading...
		- Infrastructure
		- Scalability
			- Auto-scaling
				- "Pay for what you use"
		- Durability
	- Regions and Availability zones
		- Regions
			- groupings of AWS zones worldwide
		- Availability zones
			- datacenters containing the infrastructure
 	
	- Cloud computing models
		- models in which cloud services can be provided
			- https://www.cloudflare.com/learning/serverless/glossary/platform-as-a-service-paas/
		- IaaS
			- Infrastructure as a Service
			- user needs to provice and manage: Application, Data, Runtime...
		- PaaS
			- Platform as a Service
			- user would need to provide: Application, data
		- SaaS
			- Software as a Service
			- everythin is abstracted away from you
				- ie: gmail
	Services
		- S3
		- RDS
		- EC2
			- AMI
			- EBS
			- Security Groups

For this morning: 
	- Review these terms
	- Show off one thing (from p1, from... as long as related to training)
	- push all to mickey-mouse

Connecting to EC2
	- ssh -i path/to/file.pem ec2-user@[public-dns]
	- Amazon Linux 2
		- yum
			- package manager

Docker
	- Tool revolving around the idea of containerization
		- used develop and deploy applications using containers	
	- Supported on Linux
		- Toolbox is required for other OS
	- Follows a Client-server architecture

Container
	- Standardized unit of software
	- Abtraction at the app layer that packages the code and dependencies together
		- multiple containers can run on the same Docker Engine and share the same OS with each other
			- each container runs as an isolated process
			- lightweight and scalable
			- provide a more efficient use of resources
	- CONTAINERS ARE DIFFERENT FROM VIRTUAL MACHINE

Terminology
	- Docker Daemon
		- Background service running on the OS that manages building/running Docker containers
		- Interacted via the Docker Client
	- Docker Client
		- Commandline tool used to interact with Docker daemon
	- Dockerfile
		- a simple text file that contains a list of commands to create a Docker image
		- note: a dockerfile does not have a file extension
	- Docker Image
		- blueprint of an application to create a container
		- includes everything needed to run an application, the code, runtime, dependencies...
	- Docker Container
		- a running process, isolated from the host and each other
		- each container interacts with its own private filesystem provided by a docker image
	- Docker Hub
		- online registry and version control system of docker images
			- docker pull
			- docker push
	- Docker Volume
		- preferred mechanism for persisting data generated by and used by Docker containers
			- can be shared between containers

Dockerfile
	- FROM [base-image]
		- image to be built upon/ usually the runtime environment for an application
		- at the top of the dockerfile
	- ADD [url]
		- if a file from online is needed can add it here
	- COPY [Host filesystem] [container filesystem] 
		- used to copy files into the container's file system
	- ENV
		- used to specify environment variables
	- CMD/RUN 
		- run commands like sudo yum update..
	- ENTRYPOINT
		- can be used to specify the entrypoint to an application
	- EXPOSE
		- specify what port to expose
		
Docker WorkFlow
	- Dockerfile -> docker build -t (to specify an image name) . (specify where) -> Docker Image -> docker run -p(specify port) -d(detached mode) [image-name] -> Docker Container
	- From DockerHub -> docker pull [image-name] -> Docker Image -> docker run -p(specify port) -d(detached mode) [image-name] -> Docker Container

Basic Docker Commands
	- docker
		- display a list of available commands
	- docker ps
		- displays running containers
	- docker images
		- displays available images
	- docker build
	- docker run
	- docker stop
		- stops a container
	- docker pull/push
